# PHPStan Configuration for Modular Naming Standards
# Enforces naming conventions defined in MODULAR_NAMING_STANDARDS.md

parameters:
    level: 8
    paths:
        - app
        - config
        - database
        - routes
    
    # Exclude generated files and vendor
    excludePaths:
        - vendor
        - storage
        - bootstrap/cache
        - node_modules
    
    # Custom rules for naming conventions
    customRulesetUsed: true
    
    # Naming convention rules
    namingConventions:
        # Service classes must end with 'Service'
        services:
            pattern: '/^.*Service$/'
            directories: ['app/Services']
            message: 'Service classes must end with "Service" suffix'
        
        # Controller classes must end with 'Controller'
        controllers:
            pattern: '/^.*Controller$/'
            directories: ['app/Http/Controllers']
            message: 'Controller classes must end with "Controller" suffix'
        
        # Middleware classes must end with 'Middleware'
        middleware:
            pattern: '/^.*Middleware$/'
            directories: ['app/Http/Middleware']
            message: 'Middleware classes must end with "Middleware" suffix'
        
        # Command classes must end with 'Command'
        commands:
            pattern: '/^.*Command$/'
            directories: ['app/Console/Commands']
            message: 'Command classes must end with "Command" suffix'
        
        # Trait classes must end with 'Trait'
        traits:
            pattern: '/^.*Trait$/'
            directories: ['app/Traits']
            message: 'Trait classes must end with "Trait" suffix'
        
        # Repository classes must end with 'Repository'
        repositories:
            pattern: '/^.*Repository(Interface)?$/'
            directories: ['app/Repositories']
            message: 'Repository classes must end with "Repository" or "RepositoryInterface" suffix'
        
        # Formatter classes must end with 'Formatter'
        formatters:
            pattern: '/^.*Formatter$/'
            directories: ['app/Formatters']
            message: 'Formatter classes must end with "Formatter" suffix'
    
    # Method naming conventions
    methodNamingConventions:
        # Avoid generic method names
        forbiddenMethodNames:
            - 'process'
            - 'handle'
            - 'execute'
            - 'run'
            - 'do'
            - 'perform'
        
        # Require descriptive method names
        minimumMethodNameLength: 4
        
        # Controller method patterns
        controllerMethods:
            allowedPatterns:
                - '/^(index|show|create|store|edit|update|destroy)$/'
                - '/^(get|post|put|patch|delete)[A-Z].*$/'
                - '/^[a-z][a-zA-Z0-9]*$/'
    
    # Variable naming conventions
    variableNamingConventions:
        # Forbidden variable names
        forbiddenVariableNames:
            - '$data'
            - '$result'
            - '$temp'
            - '$x'
            - '$y'
            - '$z'
            - '$i' # except in loops
            - '$j' # except in loops
            - '$k' # except in loops
        
        # Minimum variable name length
        minimumVariableNameLength: 3
        
        # Exception for common short names in specific contexts
        allowedShortNames:
            loops: ['$i', '$j', '$k']
            closures: ['$e', '$ex']
            requests: ['$r', '$req']
    
    # Namespace conventions
    namespaceConventions:
        # Services must be in domain-specific namespaces
        services:
            requiredSubnamespaces:
                - 'Statistics'
                - 'Export'
                - 'Profile'
                - 'System'
                - 'Core'
            baseNamespace: 'App\Services'
        
        # Controllers must be in role-specific namespaces
        controllers:
            requiredSubnamespaces:
                - 'Admin'
                - 'Auth'
                - 'Puskesmas'
                - 'Shared'
                - 'System'
                - 'User'
            baseNamespace: 'App\Http\Controllers\API'
        
        # Middleware can be in category-specific namespaces
        middleware:
            allowedSubnamespaces:
                - 'Auth'
                - 'Cache'
                - 'RateLimit'
                - 'Security'
            baseNamespace: 'App\Http\Middleware'
    
    # File organization rules
    fileOrganization:
        # Maximum files per directory
        maxFilesPerDirectory: 15
        
        # Directories that should be split if they exceed the limit
        directoriesRequiringSplit:
            - 'app/Services'
            - 'app/Http/Controllers'
            - 'app/Console/Commands'
        
        # Required subdirectories for large modules
        requiredSubdirectories:
            'app/Services':
                - 'Statistics'
                - 'Export'
                - 'Profile'
                - 'System'
            'app/Http/Controllers/API':
                - 'Admin'
                - 'Auth'
                - 'Puskesmas'
                - 'Shared'
    
    # Code quality rules
    codeQuality:
        # Class complexity limits
        maxClassComplexity: 10
        maxMethodComplexity: 5
        maxMethodLength: 50
        
        # Dependency injection rules
        maxConstructorParameters: 5
        requireTypeHints: true
        requireReturnTypes: true
        
        # Documentation requirements
        requireClassDocblocks: true
        requireMethodDocblocks: true
        requirePropertyDocblocks: true
    
    # Custom error messages
    errorMessages:
        namingConvention: |
            Class "%s" does not follow naming convention.
            Expected pattern: %s
            See MODULAR_NAMING_STANDARDS.md for details.
        
        namespaceConvention: |
            Class "%s" is not in the correct namespace.
            Expected namespace pattern: %s
            See MODULAR_NAMING_STANDARDS.md for organization guidelines.
        
        methodNaming: |
            Method "%s" uses a generic name.
            Use descriptive, action-oriented method names.
            Forbidden names: %s
        
        variableNaming: |
            Variable "%s" uses a generic or unclear name.
            Use descriptive camelCase variable names.
            Minimum length: %d characters
        
        fileOrganization: |
            Directory "%s" contains too many files (%d).
            Consider splitting into subdirectories.
            Maximum recommended: %d files per directory

# Include additional rules
includes:
    - phpstan-baseline.neon

# Custom rules (would need to be implemented)
services:
    # Custom rule for enforcing naming conventions
    - class: App\PHPStan\Rules\NamingConventionRule
      tags:
          - phpstan.rules.rule
    
    # Custom rule for namespace organization
    - class: App\PHPStan\Rules\NamespaceOrganizationRule
      tags:
          - phpstan.rules.rule
    
    # Custom rule for file organization
    - class: App\PHPStan\Rules\FileOrganizationRule
      tags:
          - phpstan.rules.rule
    
    # Custom rule for method naming
    - class: App\PHPStan\Rules\MethodNamingRule
      tags:
          - phpstan.rules.rule
    
    # Custom rule for variable naming
    - class: App\PHPStan\Rules\VariableNamingRule
      tags:
          - phpstan.rules.rule

# Ignore errors for legacy code (temporary)
ignoreErrors:
    # Legacy services without proper naming
    - message: '#Service class .* does not end with "Service" suffix#'
      path: app/Services/ExportService.php
      count: 1
    
    # Legacy middleware without proper naming
    - message: '#Middleware class .* does not end with "Middleware" suffix#'
      paths:
          - app/Http/Middleware/AdminOrPuskesmas.php
          - app/Http/Middleware/CheckUserRole.php
          - app/Http/Middleware/HasRole.php
          - app/Http/Middleware/IsAdmin.php
          - app/Http/Middleware/IsPuskesmas.php
    
    # Legacy commands without proper naming
    - message: '#Command class .* does not end with "Command" suffix#'
      paths:
          - app/Console/Commands/ArchiveExaminations.php
          - app/Console/Commands/CreateYearlyTargets.php
          - app/Console/Commands/SetupNewYear.php
    
    # Generic method names in legacy code
    - message: '#Method .* uses a generic name#'
      path: app/Services/StatisticsService.php
      count: 3

# Baseline file for existing violations
baselineFile: phpstan-baseline.neon